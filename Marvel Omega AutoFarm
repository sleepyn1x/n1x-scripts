local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "n1x Marvel Omega",
    Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
    LoadingTitle = "Marvel Omega Autofarm",
    LoadingSubtitle = "by sleepyn1x",
    Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

    ConfigurationSaving = {
       Enabled = true,
       FolderName = nil, -- Create a custom folder for your hub/game
       FileName = "Big Hub"
    },

    Discord = {
       Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
       Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
       RememberJoins = true -- Set this to false to make them join the discord every time they load it up
    },

    KeySystem = false, -- Set this to true to use our key system
    KeySettings = {
       Title = "Untitled",
       Subtitle = "Key System",
       Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
       FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
       SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
       GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
    }
})

local PlayerTab = Window:CreateTab("Player", 4483362458) -- Title, Image

-- Toggle element to start/stop the autofarm
local Toggle = PlayerTab:CreateToggle({
   Name = "AutoFarm",
   CurrentValue = false,  -- Initially set the toggle to false (not active)
   Flag = "FarmToggle",  -- Flag used for saving the toggle state
   Callback = function(Value)
      -- The function that takes place when the toggle is pressed
      -- Value will be true or false depending on the toggle's state
      local targetPartName = "Chest"  -- Target part to interact with

      local player = game.Players.LocalPlayer
      local character = player.Character or player.CharacterAdded:Wait()
      local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
      
      local isActivatingPrompt = false  
      
      -- Function to teleport and activate ProximityPrompt
      local function teleportAndActivatePrompt(targetPart)
         -- Moving player to the target part's Body (adjust if needed)
         local targetBodyPart = targetPart:FindFirstChild("Body")  -- Update this if the part name is different
         
         if targetBodyPart then
            humanoidRootPart.CFrame = targetBodyPart.CFrame
            
            -- Find the ProximityPrompt in the Body part
            local proximityPrompt = targetBodyPart:FindFirstChildOfClass("ProximityPrompt")
    
            if proximityPrompt and proximityPrompt.Enabled and not isActivatingPrompt then
                isActivatingPrompt = true  -- Flag to prevent multiple activations

                -- Simulate pressing the ProximityPrompt button
                fireproximityprompt(proximityPrompt)
    
                isActivatingPrompt = false
            end
         else
            warn("Body part not found in " .. targetPart.Name)
         end
      end
      
      -- Main loop to keep checking the state of the toggle
      while true do
         if Value then  -- If the toggle is ON
            local targetPart = workspace:FindFirstChild(targetPartName)
         
            if targetPart then
               teleportAndActivatePrompt(targetPart)
            end
         
            wait(1) -- Wait 1 second before the next iteration
         else  -- If the toggle is OFF, stop the autofarm
            break
         end
      end
   end,
})


local Slider = PlayerTab:CreateSlider({
    Name = "WalkSpeed",
    Range = {10, 100},
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = 10,
    Flag = "Slider1",
    Callback = function(Value)
        -- Ожидаем, пока Humanoid будет доступен
        local humanoid = game.Players.LocalPlayer.Character:WaitForChild("Humanoid")
        humanoid.WalkSpeed = Value
    end,
})


local Slider = PlayerTab:CreateSlider({
    Name = "JumpPower",
    Range = {10, 500},
    Increment = 1,
    Suffix = "Power",
    CurrentValue = 10,
    Flag = "Slider1",
    Callback = function(Value)
        -- Ожидаем, пока Humanoid будет доступен
        local humanoid = game.Players.LocalPlayer.Character:WaitForChild("Humanoid")
        humanoid.JumpPower = Value
    end,
})
